// SPDX-FileCopyrightText: 2023 Iv√°n SZKIBA
//
// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by "enumer -json -text -values -type Engine"; DO NOT EDIT.

package builder

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EngineName = "NativeDocker"

var _EngineIndex = [...]uint8{0, 6, 12}

const _EngineLowerName = "nativedocker"

func (i Engine) String() string {
	if i < 0 || i >= Engine(len(_EngineIndex)-1) {
		return fmt.Sprintf("Engine(%d)", i)
	}
	return _EngineName[_EngineIndex[i]:_EngineIndex[i+1]]
}

func (Engine) Values() []string {
	return EngineStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EngineNoOp() {
	var x [1]struct{}
	_ = x[Native-(0)]
	_ = x[Docker-(1)]
}

var _EngineValues = []Engine{Native, Docker}

var _EngineNameToValueMap = map[string]Engine{
	_EngineName[0:6]:       Native,
	_EngineLowerName[0:6]:  Native,
	_EngineName[6:12]:      Docker,
	_EngineLowerName[6:12]: Docker,
}

var _EngineNames = []string{
	_EngineName[0:6],
	_EngineName[6:12],
}

// EngineString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EngineString(s string) (Engine, error) {
	if val, ok := _EngineNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EngineNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Engine values", s)
}

// EngineValues returns all values of the enum
func EngineValues() []Engine {
	return _EngineValues
}

// EngineStrings returns a slice of all String values of the enum
func EngineStrings() []string {
	strs := make([]string, len(_EngineNames))
	copy(strs, _EngineNames)
	return strs
}

// IsAEngine returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Engine) IsAEngine() bool {
	for _, v := range _EngineValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Engine
func (i Engine) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Engine
func (i *Engine) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Engine should be a string, got %s", data)
	}

	var err error
	*i, err = EngineString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Engine
func (i Engine) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Engine
func (i *Engine) UnmarshalText(text []byte) error {
	var err error
	*i, err = EngineString(string(text))
	return err
}
